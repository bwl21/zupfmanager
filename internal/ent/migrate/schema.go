// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ProjectsColumns holds the columns for the "projects" table.
	ProjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString},
		{Name: "short_name", Type: field.TypeString},
		{Name: "config", Type: field.TypeJSON, Nullable: true},
		{Name: "abc_file_dir_preference", Type: field.TypeString, Nullable: true},
	}
	// ProjectsTable holds the schema information for the "projects" table.
	ProjectsTable = &schema.Table{
		Name:       "projects",
		Columns:    ProjectsColumns,
		PrimaryKey: []*schema.Column{ProjectsColumns[0]},
	}
	// ProjectSongsColumns holds the columns for the "project_songs" table.
	ProjectSongsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "priority", Type: field.TypeInt},
		{Name: "difficulty", Type: field.TypeEnum, Enums: []string{"easy", "medium", "hard", "expert"}, Default: "medium"},
		{Name: "comment", Type: field.TypeString, Nullable: true},
		{Name: "project_project_songs", Type: field.TypeInt, Nullable: true},
		{Name: "project_id", Type: field.TypeInt},
		{Name: "song_id", Type: field.TypeInt},
	}
	// ProjectSongsTable holds the schema information for the "project_songs" table.
	ProjectSongsTable = &schema.Table{
		Name:       "project_songs",
		Columns:    ProjectSongsColumns,
		PrimaryKey: []*schema.Column{ProjectSongsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "project_songs_projects_project_songs",
				Columns:    []*schema.Column{ProjectSongsColumns[4]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "project_songs_projects_project",
				Columns:    []*schema.Column{ProjectSongsColumns[5]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "project_songs_songs_song",
				Columns:    []*schema.Column{ProjectSongsColumns[6]},
				RefColumns: []*schema.Column{SongsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "projectsong_project_id_song_id",
				Unique:  true,
				Columns: []*schema.Column{ProjectSongsColumns[5], ProjectSongsColumns[6]},
			},
		},
	}
	// SongsColumns holds the columns for the "songs" table.
	SongsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString},
		{Name: "filename", Type: field.TypeString, Unique: true},
		{Name: "genre", Type: field.TypeString, Nullable: true},
		{Name: "copyright", Type: field.TypeString, Nullable: true},
		{Name: "tocinfo", Type: field.TypeString, Nullable: true},
	}
	// SongsTable holds the schema information for the "songs" table.
	SongsTable = &schema.Table{
		Name:       "songs",
		Columns:    SongsColumns,
		PrimaryKey: []*schema.Column{SongsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "song_filename",
				Unique:  true,
				Columns: []*schema.Column{SongsColumns[2]},
			},
			{
				Name:    "song_title",
				Unique:  false,
				Columns: []*schema.Column{SongsColumns[1]},
			},
			{
				Name:    "song_genre",
				Unique:  false,
				Columns: []*schema.Column{SongsColumns[3]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ProjectsTable,
		ProjectSongsTable,
		SongsTable,
	}
)

func init() {
	ProjectSongsTable.ForeignKeys[0].RefTable = ProjectsTable
	ProjectSongsTable.ForeignKeys[1].RefTable = ProjectsTable
	ProjectSongsTable.ForeignKeys[2].RefTable = SongsTable
}
