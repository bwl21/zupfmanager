// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bwl21/zupfmanager/internal/ent/projectsong"
	"github.com/bwl21/zupfmanager/internal/ent/song"
)

// SongCreate is the builder for creating a Song entity.
type SongCreate struct {
	config
	mutation *SongMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (sc *SongCreate) SetTitle(s string) *SongCreate {
	sc.mutation.SetTitle(s)
	return sc
}

// SetFilename sets the "filename" field.
func (sc *SongCreate) SetFilename(s string) *SongCreate {
	sc.mutation.SetFilename(s)
	return sc
}

// SetGenre sets the "genre" field.
func (sc *SongCreate) SetGenre(s string) *SongCreate {
	sc.mutation.SetGenre(s)
	return sc
}

// SetNillableGenre sets the "genre" field if the given value is not nil.
func (sc *SongCreate) SetNillableGenre(s *string) *SongCreate {
	if s != nil {
		sc.SetGenre(*s)
	}
	return sc
}

// SetCopyright sets the "copyright" field.
func (sc *SongCreate) SetCopyright(s string) *SongCreate {
	sc.mutation.SetCopyright(s)
	return sc
}

// SetNillableCopyright sets the "copyright" field if the given value is not nil.
func (sc *SongCreate) SetNillableCopyright(s *string) *SongCreate {
	if s != nil {
		sc.SetCopyright(*s)
	}
	return sc
}

// SetTocinfo sets the "tocinfo" field.
func (sc *SongCreate) SetTocinfo(s string) *SongCreate {
	sc.mutation.SetTocinfo(s)
	return sc
}

// SetNillableTocinfo sets the "tocinfo" field if the given value is not nil.
func (sc *SongCreate) SetNillableTocinfo(s *string) *SongCreate {
	if s != nil {
		sc.SetTocinfo(*s)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SongCreate) SetID(i int) *SongCreate {
	sc.mutation.SetID(i)
	return sc
}

// AddProjectSongIDs adds the "project_songs" edge to the ProjectSong entity by IDs.
func (sc *SongCreate) AddProjectSongIDs(ids ...int) *SongCreate {
	sc.mutation.AddProjectSongIDs(ids...)
	return sc
}

// AddProjectSongs adds the "project_songs" edges to the ProjectSong entity.
func (sc *SongCreate) AddProjectSongs(p ...*ProjectSong) *SongCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sc.AddProjectSongIDs(ids...)
}

// Mutation returns the SongMutation object of the builder.
func (sc *SongCreate) Mutation() *SongMutation {
	return sc.mutation
}

// Save creates the Song in the database.
func (sc *SongCreate) Save(ctx context.Context) (*Song, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SongCreate) SaveX(ctx context.Context) *Song {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SongCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SongCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SongCreate) check() error {
	if _, ok := sc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Song.title"`)}
	}
	if v, ok := sc.mutation.Title(); ok {
		if err := song.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Song.title": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Filename(); !ok {
		return &ValidationError{Name: "filename", err: errors.New(`ent: missing required field "Song.filename"`)}
	}
	if v, ok := sc.mutation.Filename(); ok {
		if err := song.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "Song.filename": %w`, err)}
		}
	}
	if v, ok := sc.mutation.ID(); ok {
		if err := song.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Song.id": %w`, err)}
		}
	}
	return nil
}

func (sc *SongCreate) sqlSave(ctx context.Context) (*Song, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SongCreate) createSpec() (*Song, *sqlgraph.CreateSpec) {
	var (
		_node = &Song{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(song.Table, sqlgraph.NewFieldSpec(song.FieldID, field.TypeInt))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Title(); ok {
		_spec.SetField(song.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := sc.mutation.Filename(); ok {
		_spec.SetField(song.FieldFilename, field.TypeString, value)
		_node.Filename = value
	}
	if value, ok := sc.mutation.Genre(); ok {
		_spec.SetField(song.FieldGenre, field.TypeString, value)
		_node.Genre = value
	}
	if value, ok := sc.mutation.Copyright(); ok {
		_spec.SetField(song.FieldCopyright, field.TypeString, value)
		_node.Copyright = value
	}
	if value, ok := sc.mutation.Tocinfo(); ok {
		_spec.SetField(song.FieldTocinfo, field.TypeString, value)
		_node.Tocinfo = value
	}
	if nodes := sc.mutation.ProjectSongsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   song.ProjectSongsTable,
			Columns: []string{song.ProjectSongsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectsong.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SongCreateBulk is the builder for creating many Song entities in bulk.
type SongCreateBulk struct {
	config
	err      error
	builders []*SongCreate
}

// Save creates the Song entities in the database.
func (scb *SongCreateBulk) Save(ctx context.Context) ([]*Song, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Song, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SongMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SongCreateBulk) SaveX(ctx context.Context) []*Song {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SongCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SongCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
