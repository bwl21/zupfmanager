// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bwl21/zupfmanager/internal/ent/predicate"
	"github.com/bwl21/zupfmanager/internal/ent/project"
	"github.com/bwl21/zupfmanager/internal/ent/projectsong"
	"github.com/bwl21/zupfmanager/internal/ent/song"
)

// ProjectSongQuery is the builder for querying ProjectSong entities.
type ProjectSongQuery struct {
	config
	ctx         *QueryContext
	order       []projectsong.OrderOption
	inters      []Interceptor
	predicates  []predicate.ProjectSong
	withProject *ProjectQuery
	withSong    *SongQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProjectSongQuery builder.
func (psq *ProjectSongQuery) Where(ps ...predicate.ProjectSong) *ProjectSongQuery {
	psq.predicates = append(psq.predicates, ps...)
	return psq
}

// Limit the number of records to be returned by this query.
func (psq *ProjectSongQuery) Limit(limit int) *ProjectSongQuery {
	psq.ctx.Limit = &limit
	return psq
}

// Offset to start from.
func (psq *ProjectSongQuery) Offset(offset int) *ProjectSongQuery {
	psq.ctx.Offset = &offset
	return psq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (psq *ProjectSongQuery) Unique(unique bool) *ProjectSongQuery {
	psq.ctx.Unique = &unique
	return psq
}

// Order specifies how the records should be ordered.
func (psq *ProjectSongQuery) Order(o ...projectsong.OrderOption) *ProjectSongQuery {
	psq.order = append(psq.order, o...)
	return psq
}

// QueryProject chains the current query on the "project" edge.
func (psq *ProjectSongQuery) QueryProject() *ProjectQuery {
	query := (&ProjectClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(projectsong.Table, projectsong.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, projectsong.ProjectTable, projectsong.ProjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySong chains the current query on the "song" edge.
func (psq *ProjectSongQuery) QuerySong() *SongQuery {
	query := (&SongClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(projectsong.Table, projectsong.FieldID, selector),
			sqlgraph.To(song.Table, song.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, projectsong.SongTable, projectsong.SongColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProjectSong entity from the query.
// Returns a *NotFoundError when no ProjectSong was found.
func (psq *ProjectSongQuery) First(ctx context.Context) (*ProjectSong, error) {
	nodes, err := psq.Limit(1).All(setContextOp(ctx, psq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{projectsong.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (psq *ProjectSongQuery) FirstX(ctx context.Context) *ProjectSong {
	node, err := psq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProjectSong ID from the query.
// Returns a *NotFoundError when no ProjectSong ID was found.
func (psq *ProjectSongQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = psq.Limit(1).IDs(setContextOp(ctx, psq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{projectsong.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (psq *ProjectSongQuery) FirstIDX(ctx context.Context) int {
	id, err := psq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProjectSong entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProjectSong entity is found.
// Returns a *NotFoundError when no ProjectSong entities are found.
func (psq *ProjectSongQuery) Only(ctx context.Context) (*ProjectSong, error) {
	nodes, err := psq.Limit(2).All(setContextOp(ctx, psq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{projectsong.Label}
	default:
		return nil, &NotSingularError{projectsong.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (psq *ProjectSongQuery) OnlyX(ctx context.Context) *ProjectSong {
	node, err := psq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProjectSong ID in the query.
// Returns a *NotSingularError when more than one ProjectSong ID is found.
// Returns a *NotFoundError when no entities are found.
func (psq *ProjectSongQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = psq.Limit(2).IDs(setContextOp(ctx, psq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{projectsong.Label}
	default:
		err = &NotSingularError{projectsong.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (psq *ProjectSongQuery) OnlyIDX(ctx context.Context) int {
	id, err := psq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProjectSongs.
func (psq *ProjectSongQuery) All(ctx context.Context) ([]*ProjectSong, error) {
	ctx = setContextOp(ctx, psq.ctx, ent.OpQueryAll)
	if err := psq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ProjectSong, *ProjectSongQuery]()
	return withInterceptors[[]*ProjectSong](ctx, psq, qr, psq.inters)
}

// AllX is like All, but panics if an error occurs.
func (psq *ProjectSongQuery) AllX(ctx context.Context) []*ProjectSong {
	nodes, err := psq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProjectSong IDs.
func (psq *ProjectSongQuery) IDs(ctx context.Context) (ids []int, err error) {
	if psq.ctx.Unique == nil && psq.path != nil {
		psq.Unique(true)
	}
	ctx = setContextOp(ctx, psq.ctx, ent.OpQueryIDs)
	if err = psq.Select(projectsong.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (psq *ProjectSongQuery) IDsX(ctx context.Context) []int {
	ids, err := psq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (psq *ProjectSongQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, psq.ctx, ent.OpQueryCount)
	if err := psq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, psq, querierCount[*ProjectSongQuery](), psq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (psq *ProjectSongQuery) CountX(ctx context.Context) int {
	count, err := psq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (psq *ProjectSongQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, psq.ctx, ent.OpQueryExist)
	switch _, err := psq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (psq *ProjectSongQuery) ExistX(ctx context.Context) bool {
	exist, err := psq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProjectSongQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (psq *ProjectSongQuery) Clone() *ProjectSongQuery {
	if psq == nil {
		return nil
	}
	return &ProjectSongQuery{
		config:      psq.config,
		ctx:         psq.ctx.Clone(),
		order:       append([]projectsong.OrderOption{}, psq.order...),
		inters:      append([]Interceptor{}, psq.inters...),
		predicates:  append([]predicate.ProjectSong{}, psq.predicates...),
		withProject: psq.withProject.Clone(),
		withSong:    psq.withSong.Clone(),
		// clone intermediate query.
		sql:  psq.sql.Clone(),
		path: psq.path,
	}
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProjectSongQuery) WithProject(opts ...func(*ProjectQuery)) *ProjectSongQuery {
	query := (&ProjectClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withProject = query
	return psq
}

// WithSong tells the query-builder to eager-load the nodes that are connected to
// the "song" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ProjectSongQuery) WithSong(opts ...func(*SongQuery)) *ProjectSongQuery {
	query := (&SongClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withSong = query
	return psq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Priority int `json:"priority,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProjectSong.Query().
//		GroupBy(projectsong.FieldPriority).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (psq *ProjectSongQuery) GroupBy(field string, fields ...string) *ProjectSongGroupBy {
	psq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProjectSongGroupBy{build: psq}
	grbuild.flds = &psq.ctx.Fields
	grbuild.label = projectsong.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Priority int `json:"priority,omitempty"`
//	}
//
//	client.ProjectSong.Query().
//		Select(projectsong.FieldPriority).
//		Scan(ctx, &v)
func (psq *ProjectSongQuery) Select(fields ...string) *ProjectSongSelect {
	psq.ctx.Fields = append(psq.ctx.Fields, fields...)
	sbuild := &ProjectSongSelect{ProjectSongQuery: psq}
	sbuild.label = projectsong.Label
	sbuild.flds, sbuild.scan = &psq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProjectSongSelect configured with the given aggregations.
func (psq *ProjectSongQuery) Aggregate(fns ...AggregateFunc) *ProjectSongSelect {
	return psq.Select().Aggregate(fns...)
}

func (psq *ProjectSongQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range psq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, psq); err != nil {
				return err
			}
		}
	}
	for _, f := range psq.ctx.Fields {
		if !projectsong.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if psq.path != nil {
		prev, err := psq.path(ctx)
		if err != nil {
			return err
		}
		psq.sql = prev
	}
	return nil
}

func (psq *ProjectSongQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProjectSong, error) {
	var (
		nodes       = []*ProjectSong{}
		_spec       = psq.querySpec()
		loadedTypes = [2]bool{
			psq.withProject != nil,
			psq.withSong != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ProjectSong).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ProjectSong{config: psq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, psq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := psq.withProject; query != nil {
		if err := psq.loadProject(ctx, query, nodes, nil,
			func(n *ProjectSong, e *Project) { n.Edges.Project = e }); err != nil {
			return nil, err
		}
	}
	if query := psq.withSong; query != nil {
		if err := psq.loadSong(ctx, query, nodes, nil,
			func(n *ProjectSong, e *Song) { n.Edges.Song = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (psq *ProjectSongQuery) loadProject(ctx context.Context, query *ProjectQuery, nodes []*ProjectSong, init func(*ProjectSong), assign func(*ProjectSong, *Project)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ProjectSong)
	for i := range nodes {
		fk := nodes[i].ProjectID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(project.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (psq *ProjectSongQuery) loadSong(ctx context.Context, query *SongQuery, nodes []*ProjectSong, init func(*ProjectSong), assign func(*ProjectSong, *Song)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ProjectSong)
	for i := range nodes {
		fk := nodes[i].SongID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(song.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "song_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (psq *ProjectSongQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := psq.querySpec()
	_spec.Node.Columns = psq.ctx.Fields
	if len(psq.ctx.Fields) > 0 {
		_spec.Unique = psq.ctx.Unique != nil && *psq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, psq.driver, _spec)
}

func (psq *ProjectSongQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(projectsong.Table, projectsong.Columns, sqlgraph.NewFieldSpec(projectsong.FieldID, field.TypeInt))
	_spec.From = psq.sql
	if unique := psq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if psq.path != nil {
		_spec.Unique = true
	}
	if fields := psq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectsong.FieldID)
		for i := range fields {
			if fields[i] != projectsong.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if psq.withProject != nil {
			_spec.Node.AddColumnOnce(projectsong.FieldProjectID)
		}
		if psq.withSong != nil {
			_spec.Node.AddColumnOnce(projectsong.FieldSongID)
		}
	}
	if ps := psq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := psq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := psq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := psq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (psq *ProjectSongQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(psq.driver.Dialect())
	t1 := builder.Table(projectsong.Table)
	columns := psq.ctx.Fields
	if len(columns) == 0 {
		columns = projectsong.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if psq.sql != nil {
		selector = psq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if psq.ctx.Unique != nil && *psq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range psq.predicates {
		p(selector)
	}
	for _, p := range psq.order {
		p(selector)
	}
	if offset := psq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := psq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProjectSongGroupBy is the group-by builder for ProjectSong entities.
type ProjectSongGroupBy struct {
	selector
	build *ProjectSongQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (psgb *ProjectSongGroupBy) Aggregate(fns ...AggregateFunc) *ProjectSongGroupBy {
	psgb.fns = append(psgb.fns, fns...)
	return psgb
}

// Scan applies the selector query and scans the result into the given value.
func (psgb *ProjectSongGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, psgb.build.ctx, ent.OpQueryGroupBy)
	if err := psgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProjectSongQuery, *ProjectSongGroupBy](ctx, psgb.build, psgb, psgb.build.inters, v)
}

func (psgb *ProjectSongGroupBy) sqlScan(ctx context.Context, root *ProjectSongQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(psgb.fns))
	for _, fn := range psgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*psgb.flds)+len(psgb.fns))
		for _, f := range *psgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*psgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := psgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProjectSongSelect is the builder for selecting fields of ProjectSong entities.
type ProjectSongSelect struct {
	*ProjectSongQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pss *ProjectSongSelect) Aggregate(fns ...AggregateFunc) *ProjectSongSelect {
	pss.fns = append(pss.fns, fns...)
	return pss
}

// Scan applies the selector query and scans the result into the given value.
func (pss *ProjectSongSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pss.ctx, ent.OpQuerySelect)
	if err := pss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProjectSongQuery, *ProjectSongSelect](ctx, pss.ProjectSongQuery, pss, pss.inters, v)
}

func (pss *ProjectSongSelect) sqlScan(ctx context.Context, root *ProjectSongQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pss.fns))
	for _, fn := range pss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
