// Code generated by ent, DO NOT EDIT.

package projectsong

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/bwl21/zupfmanager/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldLTE(FieldID, id))
}

// Priority applies equality check predicate on the "priority" field. It's identical to PriorityEQ.
func Priority(v int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldEQ(FieldPriority, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldEQ(FieldComment, v))
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldEQ(FieldProjectID, v))
}

// SongID applies equality check predicate on the "song_id" field. It's identical to SongIDEQ.
func SongID(v int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldEQ(FieldSongID, v))
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldEQ(FieldPriority, v))
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldNEQ(FieldPriority, v))
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldIn(FieldPriority, vs...))
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldNotIn(FieldPriority, vs...))
}

// PriorityGT applies the GT predicate on the "priority" field.
func PriorityGT(v int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldGT(FieldPriority, v))
}

// PriorityGTE applies the GTE predicate on the "priority" field.
func PriorityGTE(v int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldGTE(FieldPriority, v))
}

// PriorityLT applies the LT predicate on the "priority" field.
func PriorityLT(v int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldLT(FieldPriority, v))
}

// PriorityLTE applies the LTE predicate on the "priority" field.
func PriorityLTE(v int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldLTE(FieldPriority, v))
}

// DifficultyEQ applies the EQ predicate on the "difficulty" field.
func DifficultyEQ(v Difficulty) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldEQ(FieldDifficulty, v))
}

// DifficultyNEQ applies the NEQ predicate on the "difficulty" field.
func DifficultyNEQ(v Difficulty) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldNEQ(FieldDifficulty, v))
}

// DifficultyIn applies the In predicate on the "difficulty" field.
func DifficultyIn(vs ...Difficulty) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldIn(FieldDifficulty, vs...))
}

// DifficultyNotIn applies the NotIn predicate on the "difficulty" field.
func DifficultyNotIn(vs ...Difficulty) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldNotIn(FieldDifficulty, vs...))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldHasSuffix(FieldComment, v))
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldIsNull(FieldComment))
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldNotNull(FieldComment))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldContainsFold(FieldComment, v))
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldEQ(FieldProjectID, v))
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldNEQ(FieldProjectID, v))
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldIn(FieldProjectID, vs...))
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldNotIn(FieldProjectID, vs...))
}

// SongIDEQ applies the EQ predicate on the "song_id" field.
func SongIDEQ(v int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldEQ(FieldSongID, v))
}

// SongIDNEQ applies the NEQ predicate on the "song_id" field.
func SongIDNEQ(v int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldNEQ(FieldSongID, v))
}

// SongIDIn applies the In predicate on the "song_id" field.
func SongIDIn(vs ...int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldIn(FieldSongID, vs...))
}

// SongIDNotIn applies the NotIn predicate on the "song_id" field.
func SongIDNotIn(vs ...int) predicate.ProjectSong {
	return predicate.ProjectSong(sql.FieldNotIn(FieldSongID, vs...))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.ProjectSong {
	return predicate.ProjectSong(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.ProjectSong {
	return predicate.ProjectSong(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSong applies the HasEdge predicate on the "song" edge.
func HasSong() predicate.ProjectSong {
	return predicate.ProjectSong(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SongTable, SongColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSongWith applies the HasEdge predicate on the "song" edge with a given conditions (other predicates).
func HasSongWith(preds ...predicate.Song) predicate.ProjectSong {
	return predicate.ProjectSong(func(s *sql.Selector) {
		step := newSongStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProjectSong) predicate.ProjectSong {
	return predicate.ProjectSong(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProjectSong) predicate.ProjectSong {
	return predicate.ProjectSong(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProjectSong) predicate.ProjectSong {
	return predicate.ProjectSong(sql.NotPredicates(p))
}
