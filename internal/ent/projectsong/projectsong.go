// Code generated by ent, DO NOT EDIT.

package projectsong

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the projectsong type in the database.
	Label = "project_song"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// FieldDifficulty holds the string denoting the difficulty field in the database.
	FieldDifficulty = "difficulty"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldProjectID holds the string denoting the project_id field in the database.
	FieldProjectID = "project_id"
	// FieldSongID holds the string denoting the song_id field in the database.
	FieldSongID = "song_id"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// EdgeSong holds the string denoting the song edge name in mutations.
	EdgeSong = "song"
	// Table holds the table name of the projectsong in the database.
	Table = "project_songs"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "project_songs"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_id"
	// SongTable is the table that holds the song relation/edge.
	SongTable = "project_songs"
	// SongInverseTable is the table name for the Song entity.
	// It exists in this package in order to avoid circular dependency with the "song" package.
	SongInverseTable = "songs"
	// SongColumn is the table column denoting the song relation/edge.
	SongColumn = "song_id"
)

// Columns holds all SQL columns for projectsong fields.
var Columns = []string{
	FieldID,
	FieldPriority,
	FieldDifficulty,
	FieldComment,
	FieldProjectID,
	FieldSongID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "project_songs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"project_project_songs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// PriorityValidator is a validator for the "priority" field. It is called by the builders before save.
	PriorityValidator func(int) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// Difficulty defines the type for the "difficulty" enum field.
type Difficulty string

// DifficultyMedium is the default value of the Difficulty enum.
const DefaultDifficulty = DifficultyMedium

// Difficulty values.
const (
	DifficultyEasy   Difficulty = "easy"
	DifficultyMedium Difficulty = "medium"
	DifficultyHard   Difficulty = "hard"
	DifficultyExpert Difficulty = "expert"
)

func (d Difficulty) String() string {
	return string(d)
}

// DifficultyValidator is a validator for the "difficulty" field enum values. It is called by the builders before save.
func DifficultyValidator(d Difficulty) error {
	switch d {
	case DifficultyEasy, DifficultyMedium, DifficultyHard, DifficultyExpert:
		return nil
	default:
		return fmt.Errorf("projectsong: invalid enum value for difficulty field: %q", d)
	}
}

// OrderOption defines the ordering options for the ProjectSong queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPriority orders the results by the priority field.
func ByPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriority, opts...).ToFunc()
}

// ByDifficulty orders the results by the difficulty field.
func ByDifficulty(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDifficulty, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByProjectID orders the results by the project_id field.
func ByProjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectID, opts...).ToFunc()
}

// BySongID orders the results by the song_id field.
func BySongID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSongID, opts...).ToFunc()
}

// ByProjectField orders the results by project field.
func ByProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), sql.OrderByField(field, opts...))
	}
}

// BySongField orders the results by song field.
func BySongField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSongStep(), sql.OrderByField(field, opts...))
	}
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProjectTable, ProjectColumn),
	)
}
func newSongStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SongInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SongTable, SongColumn),
	)
}
