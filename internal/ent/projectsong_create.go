// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bwl21/zupfmanager/internal/ent/project"
	"github.com/bwl21/zupfmanager/internal/ent/projectsong"
	"github.com/bwl21/zupfmanager/internal/ent/song"
)

// ProjectSongCreate is the builder for creating a ProjectSong entity.
type ProjectSongCreate struct {
	config
	mutation *ProjectSongMutation
	hooks    []Hook
}

// SetPriority sets the "priority" field.
func (psc *ProjectSongCreate) SetPriority(i int) *ProjectSongCreate {
	psc.mutation.SetPriority(i)
	return psc
}

// SetDifficulty sets the "difficulty" field.
func (psc *ProjectSongCreate) SetDifficulty(pr projectsong.Difficulty) *ProjectSongCreate {
	psc.mutation.SetDifficulty(pr)
	return psc
}

// SetNillableDifficulty sets the "difficulty" field if the given value is not nil.
func (psc *ProjectSongCreate) SetNillableDifficulty(pr *projectsong.Difficulty) *ProjectSongCreate {
	if pr != nil {
		psc.SetDifficulty(*pr)
	}
	return psc
}

// SetComment sets the "comment" field.
func (psc *ProjectSongCreate) SetComment(s string) *ProjectSongCreate {
	psc.mutation.SetComment(s)
	return psc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (psc *ProjectSongCreate) SetNillableComment(s *string) *ProjectSongCreate {
	if s != nil {
		psc.SetComment(*s)
	}
	return psc
}

// SetProjectID sets the "project_id" field.
func (psc *ProjectSongCreate) SetProjectID(i int) *ProjectSongCreate {
	psc.mutation.SetProjectID(i)
	return psc
}

// SetSongID sets the "song_id" field.
func (psc *ProjectSongCreate) SetSongID(i int) *ProjectSongCreate {
	psc.mutation.SetSongID(i)
	return psc
}

// SetID sets the "id" field.
func (psc *ProjectSongCreate) SetID(i int) *ProjectSongCreate {
	psc.mutation.SetID(i)
	return psc
}

// SetProject sets the "project" edge to the Project entity.
func (psc *ProjectSongCreate) SetProject(p *Project) *ProjectSongCreate {
	return psc.SetProjectID(p.ID)
}

// SetSong sets the "song" edge to the Song entity.
func (psc *ProjectSongCreate) SetSong(s *Song) *ProjectSongCreate {
	return psc.SetSongID(s.ID)
}

// Mutation returns the ProjectSongMutation object of the builder.
func (psc *ProjectSongCreate) Mutation() *ProjectSongMutation {
	return psc.mutation
}

// Save creates the ProjectSong in the database.
func (psc *ProjectSongCreate) Save(ctx context.Context) (*ProjectSong, error) {
	psc.defaults()
	return withHooks(ctx, psc.sqlSave, psc.mutation, psc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psc *ProjectSongCreate) SaveX(ctx context.Context) *ProjectSong {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psc *ProjectSongCreate) Exec(ctx context.Context) error {
	_, err := psc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psc *ProjectSongCreate) ExecX(ctx context.Context) {
	if err := psc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psc *ProjectSongCreate) defaults() {
	if _, ok := psc.mutation.Difficulty(); !ok {
		v := projectsong.DefaultDifficulty
		psc.mutation.SetDifficulty(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psc *ProjectSongCreate) check() error {
	if _, ok := psc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "ProjectSong.priority"`)}
	}
	if v, ok := psc.mutation.Priority(); ok {
		if err := projectsong.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "ProjectSong.priority": %w`, err)}
		}
	}
	if _, ok := psc.mutation.Difficulty(); !ok {
		return &ValidationError{Name: "difficulty", err: errors.New(`ent: missing required field "ProjectSong.difficulty"`)}
	}
	if v, ok := psc.mutation.Difficulty(); ok {
		if err := projectsong.DifficultyValidator(v); err != nil {
			return &ValidationError{Name: "difficulty", err: fmt.Errorf(`ent: validator failed for field "ProjectSong.difficulty": %w`, err)}
		}
	}
	if _, ok := psc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "ProjectSong.project_id"`)}
	}
	if _, ok := psc.mutation.SongID(); !ok {
		return &ValidationError{Name: "song_id", err: errors.New(`ent: missing required field "ProjectSong.song_id"`)}
	}
	if v, ok := psc.mutation.ID(); ok {
		if err := projectsong.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "ProjectSong.id": %w`, err)}
		}
	}
	if len(psc.mutation.ProjectIDs()) == 0 {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "ProjectSong.project"`)}
	}
	if len(psc.mutation.SongIDs()) == 0 {
		return &ValidationError{Name: "song", err: errors.New(`ent: missing required edge "ProjectSong.song"`)}
	}
	return nil
}

func (psc *ProjectSongCreate) sqlSave(ctx context.Context) (*ProjectSong, error) {
	if err := psc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	psc.mutation.id = &_node.ID
	psc.mutation.done = true
	return _node, nil
}

func (psc *ProjectSongCreate) createSpec() (*ProjectSong, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectSong{config: psc.config}
		_spec = sqlgraph.NewCreateSpec(projectsong.Table, sqlgraph.NewFieldSpec(projectsong.FieldID, field.TypeInt))
	)
	if id, ok := psc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := psc.mutation.Priority(); ok {
		_spec.SetField(projectsong.FieldPriority, field.TypeInt, value)
		_node.Priority = value
	}
	if value, ok := psc.mutation.Difficulty(); ok {
		_spec.SetField(projectsong.FieldDifficulty, field.TypeEnum, value)
		_node.Difficulty = value
	}
	if value, ok := psc.mutation.Comment(); ok {
		_spec.SetField(projectsong.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if nodes := psc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectsong.ProjectTable,
			Columns: []string{projectsong.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.SongIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectsong.SongTable,
			Columns: []string{projectsong.SongColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(song.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SongID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProjectSongCreateBulk is the builder for creating many ProjectSong entities in bulk.
type ProjectSongCreateBulk struct {
	config
	err      error
	builders []*ProjectSongCreate
}

// Save creates the ProjectSong entities in the database.
func (pscb *ProjectSongCreateBulk) Save(ctx context.Context) ([]*ProjectSong, error) {
	if pscb.err != nil {
		return nil, pscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*ProjectSong, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectSongMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *ProjectSongCreateBulk) SaveX(ctx context.Context) []*ProjectSong {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pscb *ProjectSongCreateBulk) Exec(ctx context.Context) error {
	_, err := pscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscb *ProjectSongCreateBulk) ExecX(ctx context.Context) {
	if err := pscb.Exec(ctx); err != nil {
		panic(err)
	}
}
