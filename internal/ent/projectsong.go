// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/bwl21/zupfmanager/internal/ent/project"
	"github.com/bwl21/zupfmanager/internal/ent/projectsong"
	"github.com/bwl21/zupfmanager/internal/ent/song"
)

// ProjectSong is the model entity for the ProjectSong schema.
type ProjectSong struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority int `json:"priority,omitempty"`
	// Difficulty holds the value of the "difficulty" field.
	Difficulty projectsong.Difficulty `json:"difficulty,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID int `json:"project_id,omitempty"`
	// SongID holds the value of the "song_id" field.
	SongID int `json:"song_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectSongQuery when eager-loading is set.
	Edges        ProjectSongEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProjectSongEdges holds the relations/edges for other nodes in the graph.
type ProjectSongEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// Song holds the value of the song edge.
	Song *Song `json:"song,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectSongEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// SongOrErr returns the Song value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectSongEdges) SongOrErr() (*Song, error) {
	if e.Song != nil {
		return e.Song, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: song.Label}
	}
	return nil, &NotLoadedError{edge: "song"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectSong) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case projectsong.FieldID, projectsong.FieldPriority, projectsong.FieldProjectID, projectsong.FieldSongID:
			values[i] = new(sql.NullInt64)
		case projectsong.FieldDifficulty, projectsong.FieldComment:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectSong fields.
func (ps *ProjectSong) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projectsong.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ps.ID = int(value.Int64)
		case projectsong.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				ps.Priority = int(value.Int64)
			}
		case projectsong.FieldDifficulty:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field difficulty", values[i])
			} else if value.Valid {
				ps.Difficulty = projectsong.Difficulty(value.String)
			}
		case projectsong.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				ps.Comment = value.String
			}
		case projectsong.FieldProjectID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value.Valid {
				ps.ProjectID = int(value.Int64)
			}
		case projectsong.FieldSongID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field song_id", values[i])
			} else if value.Valid {
				ps.SongID = int(value.Int64)
			}
		default:
			ps.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProjectSong.
// This includes values selected through modifiers, order, etc.
func (ps *ProjectSong) Value(name string) (ent.Value, error) {
	return ps.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the ProjectSong entity.
func (ps *ProjectSong) QueryProject() *ProjectQuery {
	return NewProjectSongClient(ps.config).QueryProject(ps)
}

// QuerySong queries the "song" edge of the ProjectSong entity.
func (ps *ProjectSong) QuerySong() *SongQuery {
	return NewProjectSongClient(ps.config).QuerySong(ps)
}

// Update returns a builder for updating this ProjectSong.
// Note that you need to call ProjectSong.Unwrap() before calling this method if this ProjectSong
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *ProjectSong) Update() *ProjectSongUpdateOne {
	return NewProjectSongClient(ps.config).UpdateOne(ps)
}

// Unwrap unwraps the ProjectSong entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *ProjectSong) Unwrap() *ProjectSong {
	_tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectSong is not a transactional entity")
	}
	ps.config.driver = _tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *ProjectSong) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectSong(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ps.ID))
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", ps.Priority))
	builder.WriteString(", ")
	builder.WriteString("difficulty=")
	builder.WriteString(fmt.Sprintf("%v", ps.Difficulty))
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(ps.Comment)
	builder.WriteString(", ")
	builder.WriteString("project_id=")
	builder.WriteString(fmt.Sprintf("%v", ps.ProjectID))
	builder.WriteString(", ")
	builder.WriteString("song_id=")
	builder.WriteString(fmt.Sprintf("%v", ps.SongID))
	builder.WriteByte(')')
	return builder.String()
}

// ProjectSongs is a parsable slice of ProjectSong.
type ProjectSongs []*ProjectSong
