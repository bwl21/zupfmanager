// Code generated by ent, DO NOT EDIT.

package project

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the project type in the database.
	Label = "project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldConfig holds the string denoting the config field in the database.
	FieldConfig = "config"
	// EdgeProjectSongs holds the string denoting the project_songs edge name in mutations.
	EdgeProjectSongs = "project_songs"
	// Table holds the table name of the project in the database.
	Table = "projects"
	// ProjectSongsTable is the table that holds the project_songs relation/edge.
	ProjectSongsTable = "project_songs"
	// ProjectSongsInverseTable is the table name for the ProjectSong entity.
	// It exists in this package in order to avoid circular dependency with the "projectsong" package.
	ProjectSongsInverseTable = "project_songs"
	// ProjectSongsColumn is the table column denoting the project_songs relation/edge.
	ProjectSongsColumn = "project_id"
)

// Columns holds all SQL columns for project fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldConfig,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the Project queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByProjectSongsCount orders the results by project_songs count.
func ByProjectSongsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProjectSongsStep(), opts...)
	}
}

// ByProjectSongs orders the results by project_songs terms.
func ByProjectSongs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectSongsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProjectSongsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectSongsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ProjectSongsTable, ProjectSongsColumn),
	)
}
