// Code generated by ent, DO NOT EDIT.

package song

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/bwl21/zupfmanager/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Song {
	return predicate.Song(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Song {
	return predicate.Song(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Song {
	return predicate.Song(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Song {
	return predicate.Song(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Song {
	return predicate.Song(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Song {
	return predicate.Song(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Song {
	return predicate.Song(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Song {
	return predicate.Song(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Song {
	return predicate.Song(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Song {
	return predicate.Song(sql.FieldEQ(FieldTitle, v))
}

// Filename applies equality check predicate on the "filename" field. It's identical to FilenameEQ.
func Filename(v string) predicate.Song {
	return predicate.Song(sql.FieldEQ(FieldFilename, v))
}

// Genre applies equality check predicate on the "genre" field. It's identical to GenreEQ.
func Genre(v string) predicate.Song {
	return predicate.Song(sql.FieldEQ(FieldGenre, v))
}

// Copyright applies equality check predicate on the "copyright" field. It's identical to CopyrightEQ.
func Copyright(v string) predicate.Song {
	return predicate.Song(sql.FieldEQ(FieldCopyright, v))
}

// Tocinfo applies equality check predicate on the "tocinfo" field. It's identical to TocinfoEQ.
func Tocinfo(v string) predicate.Song {
	return predicate.Song(sql.FieldEQ(FieldTocinfo, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Song {
	return predicate.Song(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Song {
	return predicate.Song(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Song {
	return predicate.Song(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Song {
	return predicate.Song(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Song {
	return predicate.Song(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Song {
	return predicate.Song(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Song {
	return predicate.Song(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Song {
	return predicate.Song(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Song {
	return predicate.Song(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Song {
	return predicate.Song(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Song {
	return predicate.Song(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Song {
	return predicate.Song(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Song {
	return predicate.Song(sql.FieldContainsFold(FieldTitle, v))
}

// FilenameEQ applies the EQ predicate on the "filename" field.
func FilenameEQ(v string) predicate.Song {
	return predicate.Song(sql.FieldEQ(FieldFilename, v))
}

// FilenameNEQ applies the NEQ predicate on the "filename" field.
func FilenameNEQ(v string) predicate.Song {
	return predicate.Song(sql.FieldNEQ(FieldFilename, v))
}

// FilenameIn applies the In predicate on the "filename" field.
func FilenameIn(vs ...string) predicate.Song {
	return predicate.Song(sql.FieldIn(FieldFilename, vs...))
}

// FilenameNotIn applies the NotIn predicate on the "filename" field.
func FilenameNotIn(vs ...string) predicate.Song {
	return predicate.Song(sql.FieldNotIn(FieldFilename, vs...))
}

// FilenameGT applies the GT predicate on the "filename" field.
func FilenameGT(v string) predicate.Song {
	return predicate.Song(sql.FieldGT(FieldFilename, v))
}

// FilenameGTE applies the GTE predicate on the "filename" field.
func FilenameGTE(v string) predicate.Song {
	return predicate.Song(sql.FieldGTE(FieldFilename, v))
}

// FilenameLT applies the LT predicate on the "filename" field.
func FilenameLT(v string) predicate.Song {
	return predicate.Song(sql.FieldLT(FieldFilename, v))
}

// FilenameLTE applies the LTE predicate on the "filename" field.
func FilenameLTE(v string) predicate.Song {
	return predicate.Song(sql.FieldLTE(FieldFilename, v))
}

// FilenameContains applies the Contains predicate on the "filename" field.
func FilenameContains(v string) predicate.Song {
	return predicate.Song(sql.FieldContains(FieldFilename, v))
}

// FilenameHasPrefix applies the HasPrefix predicate on the "filename" field.
func FilenameHasPrefix(v string) predicate.Song {
	return predicate.Song(sql.FieldHasPrefix(FieldFilename, v))
}

// FilenameHasSuffix applies the HasSuffix predicate on the "filename" field.
func FilenameHasSuffix(v string) predicate.Song {
	return predicate.Song(sql.FieldHasSuffix(FieldFilename, v))
}

// FilenameEqualFold applies the EqualFold predicate on the "filename" field.
func FilenameEqualFold(v string) predicate.Song {
	return predicate.Song(sql.FieldEqualFold(FieldFilename, v))
}

// FilenameContainsFold applies the ContainsFold predicate on the "filename" field.
func FilenameContainsFold(v string) predicate.Song {
	return predicate.Song(sql.FieldContainsFold(FieldFilename, v))
}

// GenreEQ applies the EQ predicate on the "genre" field.
func GenreEQ(v string) predicate.Song {
	return predicate.Song(sql.FieldEQ(FieldGenre, v))
}

// GenreNEQ applies the NEQ predicate on the "genre" field.
func GenreNEQ(v string) predicate.Song {
	return predicate.Song(sql.FieldNEQ(FieldGenre, v))
}

// GenreIn applies the In predicate on the "genre" field.
func GenreIn(vs ...string) predicate.Song {
	return predicate.Song(sql.FieldIn(FieldGenre, vs...))
}

// GenreNotIn applies the NotIn predicate on the "genre" field.
func GenreNotIn(vs ...string) predicate.Song {
	return predicate.Song(sql.FieldNotIn(FieldGenre, vs...))
}

// GenreGT applies the GT predicate on the "genre" field.
func GenreGT(v string) predicate.Song {
	return predicate.Song(sql.FieldGT(FieldGenre, v))
}

// GenreGTE applies the GTE predicate on the "genre" field.
func GenreGTE(v string) predicate.Song {
	return predicate.Song(sql.FieldGTE(FieldGenre, v))
}

// GenreLT applies the LT predicate on the "genre" field.
func GenreLT(v string) predicate.Song {
	return predicate.Song(sql.FieldLT(FieldGenre, v))
}

// GenreLTE applies the LTE predicate on the "genre" field.
func GenreLTE(v string) predicate.Song {
	return predicate.Song(sql.FieldLTE(FieldGenre, v))
}

// GenreContains applies the Contains predicate on the "genre" field.
func GenreContains(v string) predicate.Song {
	return predicate.Song(sql.FieldContains(FieldGenre, v))
}

// GenreHasPrefix applies the HasPrefix predicate on the "genre" field.
func GenreHasPrefix(v string) predicate.Song {
	return predicate.Song(sql.FieldHasPrefix(FieldGenre, v))
}

// GenreHasSuffix applies the HasSuffix predicate on the "genre" field.
func GenreHasSuffix(v string) predicate.Song {
	return predicate.Song(sql.FieldHasSuffix(FieldGenre, v))
}

// GenreIsNil applies the IsNil predicate on the "genre" field.
func GenreIsNil() predicate.Song {
	return predicate.Song(sql.FieldIsNull(FieldGenre))
}

// GenreNotNil applies the NotNil predicate on the "genre" field.
func GenreNotNil() predicate.Song {
	return predicate.Song(sql.FieldNotNull(FieldGenre))
}

// GenreEqualFold applies the EqualFold predicate on the "genre" field.
func GenreEqualFold(v string) predicate.Song {
	return predicate.Song(sql.FieldEqualFold(FieldGenre, v))
}

// GenreContainsFold applies the ContainsFold predicate on the "genre" field.
func GenreContainsFold(v string) predicate.Song {
	return predicate.Song(sql.FieldContainsFold(FieldGenre, v))
}

// CopyrightEQ applies the EQ predicate on the "copyright" field.
func CopyrightEQ(v string) predicate.Song {
	return predicate.Song(sql.FieldEQ(FieldCopyright, v))
}

// CopyrightNEQ applies the NEQ predicate on the "copyright" field.
func CopyrightNEQ(v string) predicate.Song {
	return predicate.Song(sql.FieldNEQ(FieldCopyright, v))
}

// CopyrightIn applies the In predicate on the "copyright" field.
func CopyrightIn(vs ...string) predicate.Song {
	return predicate.Song(sql.FieldIn(FieldCopyright, vs...))
}

// CopyrightNotIn applies the NotIn predicate on the "copyright" field.
func CopyrightNotIn(vs ...string) predicate.Song {
	return predicate.Song(sql.FieldNotIn(FieldCopyright, vs...))
}

// CopyrightGT applies the GT predicate on the "copyright" field.
func CopyrightGT(v string) predicate.Song {
	return predicate.Song(sql.FieldGT(FieldCopyright, v))
}

// CopyrightGTE applies the GTE predicate on the "copyright" field.
func CopyrightGTE(v string) predicate.Song {
	return predicate.Song(sql.FieldGTE(FieldCopyright, v))
}

// CopyrightLT applies the LT predicate on the "copyright" field.
func CopyrightLT(v string) predicate.Song {
	return predicate.Song(sql.FieldLT(FieldCopyright, v))
}

// CopyrightLTE applies the LTE predicate on the "copyright" field.
func CopyrightLTE(v string) predicate.Song {
	return predicate.Song(sql.FieldLTE(FieldCopyright, v))
}

// CopyrightContains applies the Contains predicate on the "copyright" field.
func CopyrightContains(v string) predicate.Song {
	return predicate.Song(sql.FieldContains(FieldCopyright, v))
}

// CopyrightHasPrefix applies the HasPrefix predicate on the "copyright" field.
func CopyrightHasPrefix(v string) predicate.Song {
	return predicate.Song(sql.FieldHasPrefix(FieldCopyright, v))
}

// CopyrightHasSuffix applies the HasSuffix predicate on the "copyright" field.
func CopyrightHasSuffix(v string) predicate.Song {
	return predicate.Song(sql.FieldHasSuffix(FieldCopyright, v))
}

// CopyrightIsNil applies the IsNil predicate on the "copyright" field.
func CopyrightIsNil() predicate.Song {
	return predicate.Song(sql.FieldIsNull(FieldCopyright))
}

// CopyrightNotNil applies the NotNil predicate on the "copyright" field.
func CopyrightNotNil() predicate.Song {
	return predicate.Song(sql.FieldNotNull(FieldCopyright))
}

// CopyrightEqualFold applies the EqualFold predicate on the "copyright" field.
func CopyrightEqualFold(v string) predicate.Song {
	return predicate.Song(sql.FieldEqualFold(FieldCopyright, v))
}

// CopyrightContainsFold applies the ContainsFold predicate on the "copyright" field.
func CopyrightContainsFold(v string) predicate.Song {
	return predicate.Song(sql.FieldContainsFold(FieldCopyright, v))
}

// TocinfoEQ applies the EQ predicate on the "tocinfo" field.
func TocinfoEQ(v string) predicate.Song {
	return predicate.Song(sql.FieldEQ(FieldTocinfo, v))
}

// TocinfoNEQ applies the NEQ predicate on the "tocinfo" field.
func TocinfoNEQ(v string) predicate.Song {
	return predicate.Song(sql.FieldNEQ(FieldTocinfo, v))
}

// TocinfoIn applies the In predicate on the "tocinfo" field.
func TocinfoIn(vs ...string) predicate.Song {
	return predicate.Song(sql.FieldIn(FieldTocinfo, vs...))
}

// TocinfoNotIn applies the NotIn predicate on the "tocinfo" field.
func TocinfoNotIn(vs ...string) predicate.Song {
	return predicate.Song(sql.FieldNotIn(FieldTocinfo, vs...))
}

// TocinfoGT applies the GT predicate on the "tocinfo" field.
func TocinfoGT(v string) predicate.Song {
	return predicate.Song(sql.FieldGT(FieldTocinfo, v))
}

// TocinfoGTE applies the GTE predicate on the "tocinfo" field.
func TocinfoGTE(v string) predicate.Song {
	return predicate.Song(sql.FieldGTE(FieldTocinfo, v))
}

// TocinfoLT applies the LT predicate on the "tocinfo" field.
func TocinfoLT(v string) predicate.Song {
	return predicate.Song(sql.FieldLT(FieldTocinfo, v))
}

// TocinfoLTE applies the LTE predicate on the "tocinfo" field.
func TocinfoLTE(v string) predicate.Song {
	return predicate.Song(sql.FieldLTE(FieldTocinfo, v))
}

// TocinfoContains applies the Contains predicate on the "tocinfo" field.
func TocinfoContains(v string) predicate.Song {
	return predicate.Song(sql.FieldContains(FieldTocinfo, v))
}

// TocinfoHasPrefix applies the HasPrefix predicate on the "tocinfo" field.
func TocinfoHasPrefix(v string) predicate.Song {
	return predicate.Song(sql.FieldHasPrefix(FieldTocinfo, v))
}

// TocinfoHasSuffix applies the HasSuffix predicate on the "tocinfo" field.
func TocinfoHasSuffix(v string) predicate.Song {
	return predicate.Song(sql.FieldHasSuffix(FieldTocinfo, v))
}

// TocinfoIsNil applies the IsNil predicate on the "tocinfo" field.
func TocinfoIsNil() predicate.Song {
	return predicate.Song(sql.FieldIsNull(FieldTocinfo))
}

// TocinfoNotNil applies the NotNil predicate on the "tocinfo" field.
func TocinfoNotNil() predicate.Song {
	return predicate.Song(sql.FieldNotNull(FieldTocinfo))
}

// TocinfoEqualFold applies the EqualFold predicate on the "tocinfo" field.
func TocinfoEqualFold(v string) predicate.Song {
	return predicate.Song(sql.FieldEqualFold(FieldTocinfo, v))
}

// TocinfoContainsFold applies the ContainsFold predicate on the "tocinfo" field.
func TocinfoContainsFold(v string) predicate.Song {
	return predicate.Song(sql.FieldContainsFold(FieldTocinfo, v))
}

// HasProjectSongs applies the HasEdge predicate on the "project_songs" edge.
func HasProjectSongs() predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ProjectSongsTable, ProjectSongsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectSongsWith applies the HasEdge predicate on the "project_songs" edge with a given conditions (other predicates).
func HasProjectSongsWith(preds ...predicate.ProjectSong) predicate.Song {
	return predicate.Song(func(s *sql.Selector) {
		step := newProjectSongsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Song) predicate.Song {
	return predicate.Song(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Song) predicate.Song {
	return predicate.Song(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Song) predicate.Song {
	return predicate.Song(sql.NotPredicates(p))
}
