// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/bwl21/zupfmanager/internal/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/bwl21/zupfmanager/internal/ent/project"
	"github.com/bwl21/zupfmanager/internal/ent/projectsong"
	"github.com/bwl21/zupfmanager/internal/ent/song"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Project is the client for interacting with the Project builders.
	Project *ProjectClient
	// ProjectSong is the client for interacting with the ProjectSong builders.
	ProjectSong *ProjectSongClient
	// Song is the client for interacting with the Song builders.
	Song *SongClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Project = NewProjectClient(c.config)
	c.ProjectSong = NewProjectSongClient(c.config)
	c.Song = NewSongClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Project:     NewProjectClient(cfg),
		ProjectSong: NewProjectSongClient(cfg),
		Song:        NewSongClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Project:     NewProjectClient(cfg),
		ProjectSong: NewProjectSongClient(cfg),
		Song:        NewSongClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Project.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Project.Use(hooks...)
	c.ProjectSong.Use(hooks...)
	c.Song.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Project.Intercept(interceptors...)
	c.ProjectSong.Intercept(interceptors...)
	c.Song.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ProjectMutation:
		return c.Project.mutate(ctx, m)
	case *ProjectSongMutation:
		return c.ProjectSong.mutate(ctx, m)
	case *SongMutation:
		return c.Song.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ProjectClient is a client for the Project schema.
type ProjectClient struct {
	config
}

// NewProjectClient returns a client for the Project from the given config.
func NewProjectClient(c config) *ProjectClient {
	return &ProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `project.Hooks(f(g(h())))`.
func (c *ProjectClient) Use(hooks ...Hook) {
	c.hooks.Project = append(c.hooks.Project, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `project.Intercept(f(g(h())))`.
func (c *ProjectClient) Intercept(interceptors ...Interceptor) {
	c.inters.Project = append(c.inters.Project, interceptors...)
}

// Create returns a builder for creating a Project entity.
func (c *ProjectClient) Create() *ProjectCreate {
	mutation := newProjectMutation(c.config, OpCreate)
	return &ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Project entities.
func (c *ProjectClient) CreateBulk(builders ...*ProjectCreate) *ProjectCreateBulk {
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProjectClient) MapCreateBulk(slice any, setFunc func(*ProjectCreate, int)) *ProjectCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProjectCreateBulk{err: fmt.Errorf("calling to ProjectClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProjectCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Project.
func (c *ProjectClient) Update() *ProjectUpdate {
	mutation := newProjectMutation(c.config, OpUpdate)
	return &ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectClient) UpdateOne(pr *Project) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProject(pr))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectClient) UpdateOneID(id int) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProjectID(id))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Project.
func (c *ProjectClient) Delete() *ProjectDelete {
	mutation := newProjectMutation(c.config, OpDelete)
	return &ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectClient) DeleteOne(pr *Project) *ProjectDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectClient) DeleteOneID(id int) *ProjectDeleteOne {
	builder := c.Delete().Where(project.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectDeleteOne{builder}
}

// Query returns a query builder for Project.
func (c *ProjectClient) Query() *ProjectQuery {
	return &ProjectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProject},
		inters: c.Interceptors(),
	}
}

// Get returns a Project entity by its id.
func (c *ProjectClient) Get(ctx context.Context, id int) (*Project, error) {
	return c.Query().Where(project.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectClient) GetX(ctx context.Context, id int) *Project {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProjectSongs queries the project_songs edge of a Project.
func (c *ProjectClient) QueryProjectSongs(pr *Project) *ProjectSongQuery {
	query := (&ProjectSongClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projectsong.Table, projectsong.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, project.ProjectSongsTable, project.ProjectSongsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectClient) Hooks() []Hook {
	return c.hooks.Project
}

// Interceptors returns the client interceptors.
func (c *ProjectClient) Interceptors() []Interceptor {
	return c.inters.Project
}

func (c *ProjectClient) mutate(ctx context.Context, m *ProjectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Project mutation op: %q", m.Op())
	}
}

// ProjectSongClient is a client for the ProjectSong schema.
type ProjectSongClient struct {
	config
}

// NewProjectSongClient returns a client for the ProjectSong from the given config.
func NewProjectSongClient(c config) *ProjectSongClient {
	return &ProjectSongClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projectsong.Hooks(f(g(h())))`.
func (c *ProjectSongClient) Use(hooks ...Hook) {
	c.hooks.ProjectSong = append(c.hooks.ProjectSong, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `projectsong.Intercept(f(g(h())))`.
func (c *ProjectSongClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProjectSong = append(c.inters.ProjectSong, interceptors...)
}

// Create returns a builder for creating a ProjectSong entity.
func (c *ProjectSongClient) Create() *ProjectSongCreate {
	mutation := newProjectSongMutation(c.config, OpCreate)
	return &ProjectSongCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectSong entities.
func (c *ProjectSongClient) CreateBulk(builders ...*ProjectSongCreate) *ProjectSongCreateBulk {
	return &ProjectSongCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProjectSongClient) MapCreateBulk(slice any, setFunc func(*ProjectSongCreate, int)) *ProjectSongCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProjectSongCreateBulk{err: fmt.Errorf("calling to ProjectSongClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProjectSongCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProjectSongCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectSong.
func (c *ProjectSongClient) Update() *ProjectSongUpdate {
	mutation := newProjectSongMutation(c.config, OpUpdate)
	return &ProjectSongUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectSongClient) UpdateOne(ps *ProjectSong) *ProjectSongUpdateOne {
	mutation := newProjectSongMutation(c.config, OpUpdateOne, withProjectSong(ps))
	return &ProjectSongUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectSongClient) UpdateOneID(id int) *ProjectSongUpdateOne {
	mutation := newProjectSongMutation(c.config, OpUpdateOne, withProjectSongID(id))
	return &ProjectSongUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectSong.
func (c *ProjectSongClient) Delete() *ProjectSongDelete {
	mutation := newProjectSongMutation(c.config, OpDelete)
	return &ProjectSongDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectSongClient) DeleteOne(ps *ProjectSong) *ProjectSongDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectSongClient) DeleteOneID(id int) *ProjectSongDeleteOne {
	builder := c.Delete().Where(projectsong.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectSongDeleteOne{builder}
}

// Query returns a query builder for ProjectSong.
func (c *ProjectSongClient) Query() *ProjectSongQuery {
	return &ProjectSongQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProjectSong},
		inters: c.Interceptors(),
	}
}

// Get returns a ProjectSong entity by its id.
func (c *ProjectSongClient) Get(ctx context.Context, id int) (*ProjectSong, error) {
	return c.Query().Where(projectsong.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectSongClient) GetX(ctx context.Context, id int) *ProjectSong {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a ProjectSong.
func (c *ProjectSongClient) QueryProject(ps *ProjectSong) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectsong.Table, projectsong.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, projectsong.ProjectTable, projectsong.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySong queries the song edge of a ProjectSong.
func (c *ProjectSongClient) QuerySong(ps *ProjectSong) *SongQuery {
	query := (&SongClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectsong.Table, projectsong.FieldID, id),
			sqlgraph.To(song.Table, song.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, projectsong.SongTable, projectsong.SongColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectSongClient) Hooks() []Hook {
	return c.hooks.ProjectSong
}

// Interceptors returns the client interceptors.
func (c *ProjectSongClient) Interceptors() []Interceptor {
	return c.inters.ProjectSong
}

func (c *ProjectSongClient) mutate(ctx context.Context, m *ProjectSongMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectSongCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectSongUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectSongUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectSongDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProjectSong mutation op: %q", m.Op())
	}
}

// SongClient is a client for the Song schema.
type SongClient struct {
	config
}

// NewSongClient returns a client for the Song from the given config.
func NewSongClient(c config) *SongClient {
	return &SongClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `song.Hooks(f(g(h())))`.
func (c *SongClient) Use(hooks ...Hook) {
	c.hooks.Song = append(c.hooks.Song, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `song.Intercept(f(g(h())))`.
func (c *SongClient) Intercept(interceptors ...Interceptor) {
	c.inters.Song = append(c.inters.Song, interceptors...)
}

// Create returns a builder for creating a Song entity.
func (c *SongClient) Create() *SongCreate {
	mutation := newSongMutation(c.config, OpCreate)
	return &SongCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Song entities.
func (c *SongClient) CreateBulk(builders ...*SongCreate) *SongCreateBulk {
	return &SongCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SongClient) MapCreateBulk(slice any, setFunc func(*SongCreate, int)) *SongCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SongCreateBulk{err: fmt.Errorf("calling to SongClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SongCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SongCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Song.
func (c *SongClient) Update() *SongUpdate {
	mutation := newSongMutation(c.config, OpUpdate)
	return &SongUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SongClient) UpdateOne(s *Song) *SongUpdateOne {
	mutation := newSongMutation(c.config, OpUpdateOne, withSong(s))
	return &SongUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SongClient) UpdateOneID(id int) *SongUpdateOne {
	mutation := newSongMutation(c.config, OpUpdateOne, withSongID(id))
	return &SongUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Song.
func (c *SongClient) Delete() *SongDelete {
	mutation := newSongMutation(c.config, OpDelete)
	return &SongDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SongClient) DeleteOne(s *Song) *SongDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SongClient) DeleteOneID(id int) *SongDeleteOne {
	builder := c.Delete().Where(song.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SongDeleteOne{builder}
}

// Query returns a query builder for Song.
func (c *SongClient) Query() *SongQuery {
	return &SongQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSong},
		inters: c.Interceptors(),
	}
}

// Get returns a Song entity by its id.
func (c *SongClient) Get(ctx context.Context, id int) (*Song, error) {
	return c.Query().Where(song.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SongClient) GetX(ctx context.Context, id int) *Song {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProjectSongs queries the project_songs edge of a Song.
func (c *SongClient) QueryProjectSongs(s *Song) *ProjectSongQuery {
	query := (&ProjectSongClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(song.Table, song.FieldID, id),
			sqlgraph.To(projectsong.Table, projectsong.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, song.ProjectSongsTable, song.ProjectSongsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SongClient) Hooks() []Hook {
	return c.hooks.Song
}

// Interceptors returns the client interceptors.
func (c *SongClient) Interceptors() []Interceptor {
	return c.inters.Song
}

func (c *SongClient) mutate(ctx context.Context, m *SongMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SongCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SongUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SongUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SongDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Song mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Project, ProjectSong, Song []ent.Hook
	}
	inters struct {
		Project, ProjectSong, Song []ent.Interceptor
	}
)
