// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/bwl21/zupfmanager/internal/ent/predicate"
	"github.com/bwl21/zupfmanager/internal/ent/project"
	"github.com/bwl21/zupfmanager/internal/ent/projectsong"
	"github.com/bwl21/zupfmanager/internal/ent/song"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeProject     = "Project"
	TypeProjectSong = "ProjectSong"
	TypeSong        = "Song"
)

// ProjectMutation represents an operation that mutates the Project nodes in the graph.
type ProjectMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	title                *string
	short_name           *string
	_config              *map[string]interface{}
	clearedFields        map[string]struct{}
	project_songs        map[int]struct{}
	removedproject_songs map[int]struct{}
	clearedproject_songs bool
	done                 bool
	oldValue             func(context.Context) (*Project, error)
	predicates           []predicate.Project
}

var _ ent.Mutation = (*ProjectMutation)(nil)

// projectOption allows management of the mutation configuration using functional options.
type projectOption func(*ProjectMutation)

// newProjectMutation creates new mutation for the Project entity.
func newProjectMutation(c config, op Op, opts ...projectOption) *ProjectMutation {
	m := &ProjectMutation{
		config:        c,
		op:            op,
		typ:           TypeProject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProjectID sets the ID field of the mutation.
func withProjectID(id int) projectOption {
	return func(m *ProjectMutation) {
		var (
			err   error
			once  sync.Once
			value *Project
		)
		m.oldValue = func(ctx context.Context) (*Project, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Project.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProject sets the old Project of the mutation.
func withProject(node *Project) projectOption {
	return func(m *ProjectMutation) {
		m.oldValue = func(context.Context) (*Project, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Project entities.
func (m *ProjectMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProjectMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProjectMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Project.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *ProjectMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ProjectMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ProjectMutation) ResetTitle() {
	m.title = nil
}

// SetShortName sets the "short_name" field.
func (m *ProjectMutation) SetShortName(s string) {
	m.short_name = &s
}

// ShortName returns the value of the "short_name" field in the mutation.
func (m *ProjectMutation) ShortName() (r string, exists bool) {
	v := m.short_name
	if v == nil {
		return
	}
	return *v, true
}

// OldShortName returns the old "short_name" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldShortName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShortName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShortName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShortName: %w", err)
	}
	return oldValue.ShortName, nil
}

// ResetShortName resets all changes to the "short_name" field.
func (m *ProjectMutation) ResetShortName() {
	m.short_name = nil
}

// SetConfig sets the "config" field.
func (m *ProjectMutation) SetConfig(value map[string]interface{}) {
	m._config = &value
}

// Config returns the value of the "config" field in the mutation.
func (m *ProjectMutation) Config() (r map[string]interface{}, exists bool) {
	v := m._config
	if v == nil {
		return
	}
	return *v, true
}

// OldConfig returns the old "config" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldConfig(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfig is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfig: %w", err)
	}
	return oldValue.Config, nil
}

// ClearConfig clears the value of the "config" field.
func (m *ProjectMutation) ClearConfig() {
	m._config = nil
	m.clearedFields[project.FieldConfig] = struct{}{}
}

// ConfigCleared returns if the "config" field was cleared in this mutation.
func (m *ProjectMutation) ConfigCleared() bool {
	_, ok := m.clearedFields[project.FieldConfig]
	return ok
}

// ResetConfig resets all changes to the "config" field.
func (m *ProjectMutation) ResetConfig() {
	m._config = nil
	delete(m.clearedFields, project.FieldConfig)
}

// AddProjectSongIDs adds the "project_songs" edge to the ProjectSong entity by ids.
func (m *ProjectMutation) AddProjectSongIDs(ids ...int) {
	if m.project_songs == nil {
		m.project_songs = make(map[int]struct{})
	}
	for i := range ids {
		m.project_songs[ids[i]] = struct{}{}
	}
}

// ClearProjectSongs clears the "project_songs" edge to the ProjectSong entity.
func (m *ProjectMutation) ClearProjectSongs() {
	m.clearedproject_songs = true
}

// ProjectSongsCleared reports if the "project_songs" edge to the ProjectSong entity was cleared.
func (m *ProjectMutation) ProjectSongsCleared() bool {
	return m.clearedproject_songs
}

// RemoveProjectSongIDs removes the "project_songs" edge to the ProjectSong entity by IDs.
func (m *ProjectMutation) RemoveProjectSongIDs(ids ...int) {
	if m.removedproject_songs == nil {
		m.removedproject_songs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.project_songs, ids[i])
		m.removedproject_songs[ids[i]] = struct{}{}
	}
}

// RemovedProjectSongs returns the removed IDs of the "project_songs" edge to the ProjectSong entity.
func (m *ProjectMutation) RemovedProjectSongsIDs() (ids []int) {
	for id := range m.removedproject_songs {
		ids = append(ids, id)
	}
	return
}

// ProjectSongsIDs returns the "project_songs" edge IDs in the mutation.
func (m *ProjectMutation) ProjectSongsIDs() (ids []int) {
	for id := range m.project_songs {
		ids = append(ids, id)
	}
	return
}

// ResetProjectSongs resets all changes to the "project_songs" edge.
func (m *ProjectMutation) ResetProjectSongs() {
	m.project_songs = nil
	m.clearedproject_songs = false
	m.removedproject_songs = nil
}

// Where appends a list predicates to the ProjectMutation builder.
func (m *ProjectMutation) Where(ps ...predicate.Project) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProjectMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProjectMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Project, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProjectMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProjectMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Project).
func (m *ProjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProjectMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.title != nil {
		fields = append(fields, project.FieldTitle)
	}
	if m.short_name != nil {
		fields = append(fields, project.FieldShortName)
	}
	if m._config != nil {
		fields = append(fields, project.FieldConfig)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case project.FieldTitle:
		return m.Title()
	case project.FieldShortName:
		return m.ShortName()
	case project.FieldConfig:
		return m.Config()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case project.FieldTitle:
		return m.OldTitle(ctx)
	case project.FieldShortName:
		return m.OldShortName(ctx)
	case project.FieldConfig:
		return m.OldConfig(ctx)
	}
	return nil, fmt.Errorf("unknown Project field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case project.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case project.FieldShortName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShortName(v)
		return nil
	case project.FieldConfig:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfig(v)
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProjectMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProjectMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Project numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProjectMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(project.FieldConfig) {
		fields = append(fields, project.FieldConfig)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProjectMutation) ClearField(name string) error {
	switch name {
	case project.FieldConfig:
		m.ClearConfig()
		return nil
	}
	return fmt.Errorf("unknown Project nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProjectMutation) ResetField(name string) error {
	switch name {
	case project.FieldTitle:
		m.ResetTitle()
		return nil
	case project.FieldShortName:
		m.ResetShortName()
		return nil
	case project.FieldConfig:
		m.ResetConfig()
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.project_songs != nil {
		edges = append(edges, project.EdgeProjectSongs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProjectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case project.EdgeProjectSongs:
		ids := make([]ent.Value, 0, len(m.project_songs))
		for id := range m.project_songs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedproject_songs != nil {
		edges = append(edges, project.EdgeProjectSongs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProjectMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case project.EdgeProjectSongs:
		ids := make([]ent.Value, 0, len(m.removedproject_songs))
		for id := range m.removedproject_songs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedproject_songs {
		edges = append(edges, project.EdgeProjectSongs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProjectMutation) EdgeCleared(name string) bool {
	switch name {
	case project.EdgeProjectSongs:
		return m.clearedproject_songs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProjectMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Project unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProjectMutation) ResetEdge(name string) error {
	switch name {
	case project.EdgeProjectSongs:
		m.ResetProjectSongs()
		return nil
	}
	return fmt.Errorf("unknown Project edge %s", name)
}

// ProjectSongMutation represents an operation that mutates the ProjectSong nodes in the graph.
type ProjectSongMutation struct {
	config
	op             Op
	typ            string
	id             *int
	priority       *int
	addpriority    *int
	difficulty     *projectsong.Difficulty
	comment        *string
	clearedFields  map[string]struct{}
	project        *int
	clearedproject bool
	song           *int
	clearedsong    bool
	done           bool
	oldValue       func(context.Context) (*ProjectSong, error)
	predicates     []predicate.ProjectSong
}

var _ ent.Mutation = (*ProjectSongMutation)(nil)

// projectsongOption allows management of the mutation configuration using functional options.
type projectsongOption func(*ProjectSongMutation)

// newProjectSongMutation creates new mutation for the ProjectSong entity.
func newProjectSongMutation(c config, op Op, opts ...projectsongOption) *ProjectSongMutation {
	m := &ProjectSongMutation{
		config:        c,
		op:            op,
		typ:           TypeProjectSong,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProjectSongID sets the ID field of the mutation.
func withProjectSongID(id int) projectsongOption {
	return func(m *ProjectSongMutation) {
		var (
			err   error
			once  sync.Once
			value *ProjectSong
		)
		m.oldValue = func(ctx context.Context) (*ProjectSong, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProjectSong.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProjectSong sets the old ProjectSong of the mutation.
func withProjectSong(node *ProjectSong) projectsongOption {
	return func(m *ProjectSongMutation) {
		m.oldValue = func(context.Context) (*ProjectSong, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProjectSongMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProjectSongMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ProjectSong entities.
func (m *ProjectSongMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProjectSongMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProjectSongMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProjectSong.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPriority sets the "priority" field.
func (m *ProjectSongMutation) SetPriority(i int) {
	m.priority = &i
	m.addpriority = nil
}

// Priority returns the value of the "priority" field in the mutation.
func (m *ProjectSongMutation) Priority() (r int, exists bool) {
	v := m.priority
	if v == nil {
		return
	}
	return *v, true
}

// OldPriority returns the old "priority" field's value of the ProjectSong entity.
// If the ProjectSong object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectSongMutation) OldPriority(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriority is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriority requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriority: %w", err)
	}
	return oldValue.Priority, nil
}

// AddPriority adds i to the "priority" field.
func (m *ProjectSongMutation) AddPriority(i int) {
	if m.addpriority != nil {
		*m.addpriority += i
	} else {
		m.addpriority = &i
	}
}

// AddedPriority returns the value that was added to the "priority" field in this mutation.
func (m *ProjectSongMutation) AddedPriority() (r int, exists bool) {
	v := m.addpriority
	if v == nil {
		return
	}
	return *v, true
}

// ResetPriority resets all changes to the "priority" field.
func (m *ProjectSongMutation) ResetPriority() {
	m.priority = nil
	m.addpriority = nil
}

// SetDifficulty sets the "difficulty" field.
func (m *ProjectSongMutation) SetDifficulty(pr projectsong.Difficulty) {
	m.difficulty = &pr
}

// Difficulty returns the value of the "difficulty" field in the mutation.
func (m *ProjectSongMutation) Difficulty() (r projectsong.Difficulty, exists bool) {
	v := m.difficulty
	if v == nil {
		return
	}
	return *v, true
}

// OldDifficulty returns the old "difficulty" field's value of the ProjectSong entity.
// If the ProjectSong object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectSongMutation) OldDifficulty(ctx context.Context) (v projectsong.Difficulty, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDifficulty is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDifficulty requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDifficulty: %w", err)
	}
	return oldValue.Difficulty, nil
}

// ResetDifficulty resets all changes to the "difficulty" field.
func (m *ProjectSongMutation) ResetDifficulty() {
	m.difficulty = nil
}

// SetComment sets the "comment" field.
func (m *ProjectSongMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *ProjectSongMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the ProjectSong entity.
// If the ProjectSong object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectSongMutation) OldComment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ClearComment clears the value of the "comment" field.
func (m *ProjectSongMutation) ClearComment() {
	m.comment = nil
	m.clearedFields[projectsong.FieldComment] = struct{}{}
}

// CommentCleared returns if the "comment" field was cleared in this mutation.
func (m *ProjectSongMutation) CommentCleared() bool {
	_, ok := m.clearedFields[projectsong.FieldComment]
	return ok
}

// ResetComment resets all changes to the "comment" field.
func (m *ProjectSongMutation) ResetComment() {
	m.comment = nil
	delete(m.clearedFields, projectsong.FieldComment)
}

// SetProjectID sets the "project_id" field.
func (m *ProjectSongMutation) SetProjectID(i int) {
	m.project = &i
}

// ProjectID returns the value of the "project_id" field in the mutation.
func (m *ProjectSongMutation) ProjectID() (r int, exists bool) {
	v := m.project
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectID returns the old "project_id" field's value of the ProjectSong entity.
// If the ProjectSong object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectSongMutation) OldProjectID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectID: %w", err)
	}
	return oldValue.ProjectID, nil
}

// ResetProjectID resets all changes to the "project_id" field.
func (m *ProjectSongMutation) ResetProjectID() {
	m.project = nil
}

// SetSongID sets the "song_id" field.
func (m *ProjectSongMutation) SetSongID(i int) {
	m.song = &i
}

// SongID returns the value of the "song_id" field in the mutation.
func (m *ProjectSongMutation) SongID() (r int, exists bool) {
	v := m.song
	if v == nil {
		return
	}
	return *v, true
}

// OldSongID returns the old "song_id" field's value of the ProjectSong entity.
// If the ProjectSong object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectSongMutation) OldSongID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSongID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSongID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSongID: %w", err)
	}
	return oldValue.SongID, nil
}

// ResetSongID resets all changes to the "song_id" field.
func (m *ProjectSongMutation) ResetSongID() {
	m.song = nil
}

// ClearProject clears the "project" edge to the Project entity.
func (m *ProjectSongMutation) ClearProject() {
	m.clearedproject = true
	m.clearedFields[projectsong.FieldProjectID] = struct{}{}
}

// ProjectCleared reports if the "project" edge to the Project entity was cleared.
func (m *ProjectSongMutation) ProjectCleared() bool {
	return m.clearedproject
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *ProjectSongMutation) ProjectIDs() (ids []int) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *ProjectSongMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// ClearSong clears the "song" edge to the Song entity.
func (m *ProjectSongMutation) ClearSong() {
	m.clearedsong = true
	m.clearedFields[projectsong.FieldSongID] = struct{}{}
}

// SongCleared reports if the "song" edge to the Song entity was cleared.
func (m *ProjectSongMutation) SongCleared() bool {
	return m.clearedsong
}

// SongIDs returns the "song" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SongID instead. It exists only for internal usage by the builders.
func (m *ProjectSongMutation) SongIDs() (ids []int) {
	if id := m.song; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSong resets all changes to the "song" edge.
func (m *ProjectSongMutation) ResetSong() {
	m.song = nil
	m.clearedsong = false
}

// Where appends a list predicates to the ProjectSongMutation builder.
func (m *ProjectSongMutation) Where(ps ...predicate.ProjectSong) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProjectSongMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProjectSongMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProjectSong, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProjectSongMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProjectSongMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProjectSong).
func (m *ProjectSongMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProjectSongMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.priority != nil {
		fields = append(fields, projectsong.FieldPriority)
	}
	if m.difficulty != nil {
		fields = append(fields, projectsong.FieldDifficulty)
	}
	if m.comment != nil {
		fields = append(fields, projectsong.FieldComment)
	}
	if m.project != nil {
		fields = append(fields, projectsong.FieldProjectID)
	}
	if m.song != nil {
		fields = append(fields, projectsong.FieldSongID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProjectSongMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case projectsong.FieldPriority:
		return m.Priority()
	case projectsong.FieldDifficulty:
		return m.Difficulty()
	case projectsong.FieldComment:
		return m.Comment()
	case projectsong.FieldProjectID:
		return m.ProjectID()
	case projectsong.FieldSongID:
		return m.SongID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProjectSongMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case projectsong.FieldPriority:
		return m.OldPriority(ctx)
	case projectsong.FieldDifficulty:
		return m.OldDifficulty(ctx)
	case projectsong.FieldComment:
		return m.OldComment(ctx)
	case projectsong.FieldProjectID:
		return m.OldProjectID(ctx)
	case projectsong.FieldSongID:
		return m.OldSongID(ctx)
	}
	return nil, fmt.Errorf("unknown ProjectSong field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectSongMutation) SetField(name string, value ent.Value) error {
	switch name {
	case projectsong.FieldPriority:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriority(v)
		return nil
	case projectsong.FieldDifficulty:
		v, ok := value.(projectsong.Difficulty)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDifficulty(v)
		return nil
	case projectsong.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	case projectsong.FieldProjectID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectID(v)
		return nil
	case projectsong.FieldSongID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSongID(v)
		return nil
	}
	return fmt.Errorf("unknown ProjectSong field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProjectSongMutation) AddedFields() []string {
	var fields []string
	if m.addpriority != nil {
		fields = append(fields, projectsong.FieldPriority)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProjectSongMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case projectsong.FieldPriority:
		return m.AddedPriority()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectSongMutation) AddField(name string, value ent.Value) error {
	switch name {
	case projectsong.FieldPriority:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPriority(v)
		return nil
	}
	return fmt.Errorf("unknown ProjectSong numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProjectSongMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(projectsong.FieldComment) {
		fields = append(fields, projectsong.FieldComment)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProjectSongMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProjectSongMutation) ClearField(name string) error {
	switch name {
	case projectsong.FieldComment:
		m.ClearComment()
		return nil
	}
	return fmt.Errorf("unknown ProjectSong nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProjectSongMutation) ResetField(name string) error {
	switch name {
	case projectsong.FieldPriority:
		m.ResetPriority()
		return nil
	case projectsong.FieldDifficulty:
		m.ResetDifficulty()
		return nil
	case projectsong.FieldComment:
		m.ResetComment()
		return nil
	case projectsong.FieldProjectID:
		m.ResetProjectID()
		return nil
	case projectsong.FieldSongID:
		m.ResetSongID()
		return nil
	}
	return fmt.Errorf("unknown ProjectSong field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProjectSongMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.project != nil {
		edges = append(edges, projectsong.EdgeProject)
	}
	if m.song != nil {
		edges = append(edges, projectsong.EdgeSong)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProjectSongMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case projectsong.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	case projectsong.EdgeSong:
		if id := m.song; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProjectSongMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProjectSongMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProjectSongMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedproject {
		edges = append(edges, projectsong.EdgeProject)
	}
	if m.clearedsong {
		edges = append(edges, projectsong.EdgeSong)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProjectSongMutation) EdgeCleared(name string) bool {
	switch name {
	case projectsong.EdgeProject:
		return m.clearedproject
	case projectsong.EdgeSong:
		return m.clearedsong
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProjectSongMutation) ClearEdge(name string) error {
	switch name {
	case projectsong.EdgeProject:
		m.ClearProject()
		return nil
	case projectsong.EdgeSong:
		m.ClearSong()
		return nil
	}
	return fmt.Errorf("unknown ProjectSong unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProjectSongMutation) ResetEdge(name string) error {
	switch name {
	case projectsong.EdgeProject:
		m.ResetProject()
		return nil
	case projectsong.EdgeSong:
		m.ResetSong()
		return nil
	}
	return fmt.Errorf("unknown ProjectSong edge %s", name)
}

// SongMutation represents an operation that mutates the Song nodes in the graph.
type SongMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	title                *string
	filename             *string
	genre                *string
	copyright            *string
	clearedFields        map[string]struct{}
	project_songs        map[int]struct{}
	removedproject_songs map[int]struct{}
	clearedproject_songs bool
	done                 bool
	oldValue             func(context.Context) (*Song, error)
	predicates           []predicate.Song
}

var _ ent.Mutation = (*SongMutation)(nil)

// songOption allows management of the mutation configuration using functional options.
type songOption func(*SongMutation)

// newSongMutation creates new mutation for the Song entity.
func newSongMutation(c config, op Op, opts ...songOption) *SongMutation {
	m := &SongMutation{
		config:        c,
		op:            op,
		typ:           TypeSong,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSongID sets the ID field of the mutation.
func withSongID(id int) songOption {
	return func(m *SongMutation) {
		var (
			err   error
			once  sync.Once
			value *Song
		)
		m.oldValue = func(ctx context.Context) (*Song, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Song.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSong sets the old Song of the mutation.
func withSong(node *Song) songOption {
	return func(m *SongMutation) {
		m.oldValue = func(context.Context) (*Song, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SongMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SongMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Song entities.
func (m *SongMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SongMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SongMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Song.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *SongMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *SongMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Song entity.
// If the Song object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SongMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *SongMutation) ResetTitle() {
	m.title = nil
}

// SetFilename sets the "filename" field.
func (m *SongMutation) SetFilename(s string) {
	m.filename = &s
}

// Filename returns the value of the "filename" field in the mutation.
func (m *SongMutation) Filename() (r string, exists bool) {
	v := m.filename
	if v == nil {
		return
	}
	return *v, true
}

// OldFilename returns the old "filename" field's value of the Song entity.
// If the Song object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SongMutation) OldFilename(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilename is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilename requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilename: %w", err)
	}
	return oldValue.Filename, nil
}

// ResetFilename resets all changes to the "filename" field.
func (m *SongMutation) ResetFilename() {
	m.filename = nil
}

// SetGenre sets the "genre" field.
func (m *SongMutation) SetGenre(s string) {
	m.genre = &s
}

// Genre returns the value of the "genre" field in the mutation.
func (m *SongMutation) Genre() (r string, exists bool) {
	v := m.genre
	if v == nil {
		return
	}
	return *v, true
}

// OldGenre returns the old "genre" field's value of the Song entity.
// If the Song object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SongMutation) OldGenre(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGenre is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGenre requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGenre: %w", err)
	}
	return oldValue.Genre, nil
}

// ClearGenre clears the value of the "genre" field.
func (m *SongMutation) ClearGenre() {
	m.genre = nil
	m.clearedFields[song.FieldGenre] = struct{}{}
}

// GenreCleared returns if the "genre" field was cleared in this mutation.
func (m *SongMutation) GenreCleared() bool {
	_, ok := m.clearedFields[song.FieldGenre]
	return ok
}

// ResetGenre resets all changes to the "genre" field.
func (m *SongMutation) ResetGenre() {
	m.genre = nil
	delete(m.clearedFields, song.FieldGenre)
}

// SetCopyright sets the "copyright" field.
func (m *SongMutation) SetCopyright(s string) {
	m.copyright = &s
}

// Copyright returns the value of the "copyright" field in the mutation.
func (m *SongMutation) Copyright() (r string, exists bool) {
	v := m.copyright
	if v == nil {
		return
	}
	return *v, true
}

// OldCopyright returns the old "copyright" field's value of the Song entity.
// If the Song object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SongMutation) OldCopyright(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCopyright is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCopyright requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCopyright: %w", err)
	}
	return oldValue.Copyright, nil
}

// ClearCopyright clears the value of the "copyright" field.
func (m *SongMutation) ClearCopyright() {
	m.copyright = nil
	m.clearedFields[song.FieldCopyright] = struct{}{}
}

// CopyrightCleared returns if the "copyright" field was cleared in this mutation.
func (m *SongMutation) CopyrightCleared() bool {
	_, ok := m.clearedFields[song.FieldCopyright]
	return ok
}

// ResetCopyright resets all changes to the "copyright" field.
func (m *SongMutation) ResetCopyright() {
	m.copyright = nil
	delete(m.clearedFields, song.FieldCopyright)
}

// AddProjectSongIDs adds the "project_songs" edge to the ProjectSong entity by ids.
func (m *SongMutation) AddProjectSongIDs(ids ...int) {
	if m.project_songs == nil {
		m.project_songs = make(map[int]struct{})
	}
	for i := range ids {
		m.project_songs[ids[i]] = struct{}{}
	}
}

// ClearProjectSongs clears the "project_songs" edge to the ProjectSong entity.
func (m *SongMutation) ClearProjectSongs() {
	m.clearedproject_songs = true
}

// ProjectSongsCleared reports if the "project_songs" edge to the ProjectSong entity was cleared.
func (m *SongMutation) ProjectSongsCleared() bool {
	return m.clearedproject_songs
}

// RemoveProjectSongIDs removes the "project_songs" edge to the ProjectSong entity by IDs.
func (m *SongMutation) RemoveProjectSongIDs(ids ...int) {
	if m.removedproject_songs == nil {
		m.removedproject_songs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.project_songs, ids[i])
		m.removedproject_songs[ids[i]] = struct{}{}
	}
}

// RemovedProjectSongs returns the removed IDs of the "project_songs" edge to the ProjectSong entity.
func (m *SongMutation) RemovedProjectSongsIDs() (ids []int) {
	for id := range m.removedproject_songs {
		ids = append(ids, id)
	}
	return
}

// ProjectSongsIDs returns the "project_songs" edge IDs in the mutation.
func (m *SongMutation) ProjectSongsIDs() (ids []int) {
	for id := range m.project_songs {
		ids = append(ids, id)
	}
	return
}

// ResetProjectSongs resets all changes to the "project_songs" edge.
func (m *SongMutation) ResetProjectSongs() {
	m.project_songs = nil
	m.clearedproject_songs = false
	m.removedproject_songs = nil
}

// Where appends a list predicates to the SongMutation builder.
func (m *SongMutation) Where(ps ...predicate.Song) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SongMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SongMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Song, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SongMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SongMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Song).
func (m *SongMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SongMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.title != nil {
		fields = append(fields, song.FieldTitle)
	}
	if m.filename != nil {
		fields = append(fields, song.FieldFilename)
	}
	if m.genre != nil {
		fields = append(fields, song.FieldGenre)
	}
	if m.copyright != nil {
		fields = append(fields, song.FieldCopyright)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SongMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case song.FieldTitle:
		return m.Title()
	case song.FieldFilename:
		return m.Filename()
	case song.FieldGenre:
		return m.Genre()
	case song.FieldCopyright:
		return m.Copyright()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SongMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case song.FieldTitle:
		return m.OldTitle(ctx)
	case song.FieldFilename:
		return m.OldFilename(ctx)
	case song.FieldGenre:
		return m.OldGenre(ctx)
	case song.FieldCopyright:
		return m.OldCopyright(ctx)
	}
	return nil, fmt.Errorf("unknown Song field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SongMutation) SetField(name string, value ent.Value) error {
	switch name {
	case song.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case song.FieldFilename:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilename(v)
		return nil
	case song.FieldGenre:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGenre(v)
		return nil
	case song.FieldCopyright:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCopyright(v)
		return nil
	}
	return fmt.Errorf("unknown Song field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SongMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SongMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SongMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Song numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SongMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(song.FieldGenre) {
		fields = append(fields, song.FieldGenre)
	}
	if m.FieldCleared(song.FieldCopyright) {
		fields = append(fields, song.FieldCopyright)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SongMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SongMutation) ClearField(name string) error {
	switch name {
	case song.FieldGenre:
		m.ClearGenre()
		return nil
	case song.FieldCopyright:
		m.ClearCopyright()
		return nil
	}
	return fmt.Errorf("unknown Song nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SongMutation) ResetField(name string) error {
	switch name {
	case song.FieldTitle:
		m.ResetTitle()
		return nil
	case song.FieldFilename:
		m.ResetFilename()
		return nil
	case song.FieldGenre:
		m.ResetGenre()
		return nil
	case song.FieldCopyright:
		m.ResetCopyright()
		return nil
	}
	return fmt.Errorf("unknown Song field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SongMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.project_songs != nil {
		edges = append(edges, song.EdgeProjectSongs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SongMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case song.EdgeProjectSongs:
		ids := make([]ent.Value, 0, len(m.project_songs))
		for id := range m.project_songs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SongMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedproject_songs != nil {
		edges = append(edges, song.EdgeProjectSongs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SongMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case song.EdgeProjectSongs:
		ids := make([]ent.Value, 0, len(m.removedproject_songs))
		for id := range m.removedproject_songs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SongMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedproject_songs {
		edges = append(edges, song.EdgeProjectSongs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SongMutation) EdgeCleared(name string) bool {
	switch name {
	case song.EdgeProjectSongs:
		return m.clearedproject_songs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SongMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Song unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SongMutation) ResetEdge(name string) error {
	switch name {
	case song.EdgeProjectSongs:
		m.ResetProjectSongs()
		return nil
	}
	return fmt.Errorf("unknown Song edge %s", name)
}
