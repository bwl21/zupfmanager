// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bwl21/zupfmanager/internal/ent/predicate"
	"github.com/bwl21/zupfmanager/internal/ent/project"
	"github.com/bwl21/zupfmanager/internal/ent/projectsong"
	"github.com/bwl21/zupfmanager/internal/ent/song"
)

// ProjectSongUpdate is the builder for updating ProjectSong entities.
type ProjectSongUpdate struct {
	config
	hooks     []Hook
	mutation  *ProjectSongMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProjectSongUpdate builder.
func (psu *ProjectSongUpdate) Where(ps ...predicate.ProjectSong) *ProjectSongUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetPriority sets the "priority" field.
func (psu *ProjectSongUpdate) SetPriority(i int) *ProjectSongUpdate {
	psu.mutation.ResetPriority()
	psu.mutation.SetPriority(i)
	return psu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (psu *ProjectSongUpdate) SetNillablePriority(i *int) *ProjectSongUpdate {
	if i != nil {
		psu.SetPriority(*i)
	}
	return psu
}

// AddPriority adds i to the "priority" field.
func (psu *ProjectSongUpdate) AddPriority(i int) *ProjectSongUpdate {
	psu.mutation.AddPriority(i)
	return psu
}

// SetDifficulty sets the "difficulty" field.
func (psu *ProjectSongUpdate) SetDifficulty(pr projectsong.Difficulty) *ProjectSongUpdate {
	psu.mutation.SetDifficulty(pr)
	return psu
}

// SetNillableDifficulty sets the "difficulty" field if the given value is not nil.
func (psu *ProjectSongUpdate) SetNillableDifficulty(pr *projectsong.Difficulty) *ProjectSongUpdate {
	if pr != nil {
		psu.SetDifficulty(*pr)
	}
	return psu
}

// SetComment sets the "comment" field.
func (psu *ProjectSongUpdate) SetComment(s string) *ProjectSongUpdate {
	psu.mutation.SetComment(s)
	return psu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (psu *ProjectSongUpdate) SetNillableComment(s *string) *ProjectSongUpdate {
	if s != nil {
		psu.SetComment(*s)
	}
	return psu
}

// ClearComment clears the value of the "comment" field.
func (psu *ProjectSongUpdate) ClearComment() *ProjectSongUpdate {
	psu.mutation.ClearComment()
	return psu
}

// SetProjectID sets the "project_id" field.
func (psu *ProjectSongUpdate) SetProjectID(i int) *ProjectSongUpdate {
	psu.mutation.SetProjectID(i)
	return psu
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (psu *ProjectSongUpdate) SetNillableProjectID(i *int) *ProjectSongUpdate {
	if i != nil {
		psu.SetProjectID(*i)
	}
	return psu
}

// SetSongID sets the "song_id" field.
func (psu *ProjectSongUpdate) SetSongID(i int) *ProjectSongUpdate {
	psu.mutation.SetSongID(i)
	return psu
}

// SetNillableSongID sets the "song_id" field if the given value is not nil.
func (psu *ProjectSongUpdate) SetNillableSongID(i *int) *ProjectSongUpdate {
	if i != nil {
		psu.SetSongID(*i)
	}
	return psu
}

// SetProject sets the "project" edge to the Project entity.
func (psu *ProjectSongUpdate) SetProject(p *Project) *ProjectSongUpdate {
	return psu.SetProjectID(p.ID)
}

// SetSong sets the "song" edge to the Song entity.
func (psu *ProjectSongUpdate) SetSong(s *Song) *ProjectSongUpdate {
	return psu.SetSongID(s.ID)
}

// Mutation returns the ProjectSongMutation object of the builder.
func (psu *ProjectSongUpdate) Mutation() *ProjectSongMutation {
	return psu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (psu *ProjectSongUpdate) ClearProject() *ProjectSongUpdate {
	psu.mutation.ClearProject()
	return psu
}

// ClearSong clears the "song" edge to the Song entity.
func (psu *ProjectSongUpdate) ClearSong() *ProjectSongUpdate {
	psu.mutation.ClearSong()
	return psu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *ProjectSongUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *ProjectSongUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *ProjectSongUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *ProjectSongUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psu *ProjectSongUpdate) check() error {
	if v, ok := psu.mutation.Priority(); ok {
		if err := projectsong.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "ProjectSong.priority": %w`, err)}
		}
	}
	if v, ok := psu.mutation.Difficulty(); ok {
		if err := projectsong.DifficultyValidator(v); err != nil {
			return &ValidationError{Name: "difficulty", err: fmt.Errorf(`ent: validator failed for field "ProjectSong.difficulty": %w`, err)}
		}
	}
	if psu.mutation.ProjectCleared() && len(psu.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectSong.project"`)
	}
	if psu.mutation.SongCleared() && len(psu.mutation.SongIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectSong.song"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (psu *ProjectSongUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProjectSongUpdate {
	psu.modifiers = append(psu.modifiers, modifiers...)
	return psu
}

func (psu *ProjectSongUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := psu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectsong.Table, projectsong.Columns, sqlgraph.NewFieldSpec(projectsong.FieldID, field.TypeInt))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.Priority(); ok {
		_spec.SetField(projectsong.FieldPriority, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedPriority(); ok {
		_spec.AddField(projectsong.FieldPriority, field.TypeInt, value)
	}
	if value, ok := psu.mutation.Difficulty(); ok {
		_spec.SetField(projectsong.FieldDifficulty, field.TypeEnum, value)
	}
	if value, ok := psu.mutation.Comment(); ok {
		_spec.SetField(projectsong.FieldComment, field.TypeString, value)
	}
	if psu.mutation.CommentCleared() {
		_spec.ClearField(projectsong.FieldComment, field.TypeString)
	}
	if psu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectsong.ProjectTable,
			Columns: []string{projectsong.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectsong.ProjectTable,
			Columns: []string{projectsong.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.SongCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectsong.SongTable,
			Columns: []string{projectsong.SongColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(song.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.SongIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectsong.SongTable,
			Columns: []string{projectsong.SongColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(song.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(psu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectsong.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// ProjectSongUpdateOne is the builder for updating a single ProjectSong entity.
type ProjectSongUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProjectSongMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetPriority sets the "priority" field.
func (psuo *ProjectSongUpdateOne) SetPriority(i int) *ProjectSongUpdateOne {
	psuo.mutation.ResetPriority()
	psuo.mutation.SetPriority(i)
	return psuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (psuo *ProjectSongUpdateOne) SetNillablePriority(i *int) *ProjectSongUpdateOne {
	if i != nil {
		psuo.SetPriority(*i)
	}
	return psuo
}

// AddPriority adds i to the "priority" field.
func (psuo *ProjectSongUpdateOne) AddPriority(i int) *ProjectSongUpdateOne {
	psuo.mutation.AddPriority(i)
	return psuo
}

// SetDifficulty sets the "difficulty" field.
func (psuo *ProjectSongUpdateOne) SetDifficulty(pr projectsong.Difficulty) *ProjectSongUpdateOne {
	psuo.mutation.SetDifficulty(pr)
	return psuo
}

// SetNillableDifficulty sets the "difficulty" field if the given value is not nil.
func (psuo *ProjectSongUpdateOne) SetNillableDifficulty(pr *projectsong.Difficulty) *ProjectSongUpdateOne {
	if pr != nil {
		psuo.SetDifficulty(*pr)
	}
	return psuo
}

// SetComment sets the "comment" field.
func (psuo *ProjectSongUpdateOne) SetComment(s string) *ProjectSongUpdateOne {
	psuo.mutation.SetComment(s)
	return psuo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (psuo *ProjectSongUpdateOne) SetNillableComment(s *string) *ProjectSongUpdateOne {
	if s != nil {
		psuo.SetComment(*s)
	}
	return psuo
}

// ClearComment clears the value of the "comment" field.
func (psuo *ProjectSongUpdateOne) ClearComment() *ProjectSongUpdateOne {
	psuo.mutation.ClearComment()
	return psuo
}

// SetProjectID sets the "project_id" field.
func (psuo *ProjectSongUpdateOne) SetProjectID(i int) *ProjectSongUpdateOne {
	psuo.mutation.SetProjectID(i)
	return psuo
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (psuo *ProjectSongUpdateOne) SetNillableProjectID(i *int) *ProjectSongUpdateOne {
	if i != nil {
		psuo.SetProjectID(*i)
	}
	return psuo
}

// SetSongID sets the "song_id" field.
func (psuo *ProjectSongUpdateOne) SetSongID(i int) *ProjectSongUpdateOne {
	psuo.mutation.SetSongID(i)
	return psuo
}

// SetNillableSongID sets the "song_id" field if the given value is not nil.
func (psuo *ProjectSongUpdateOne) SetNillableSongID(i *int) *ProjectSongUpdateOne {
	if i != nil {
		psuo.SetSongID(*i)
	}
	return psuo
}

// SetProject sets the "project" edge to the Project entity.
func (psuo *ProjectSongUpdateOne) SetProject(p *Project) *ProjectSongUpdateOne {
	return psuo.SetProjectID(p.ID)
}

// SetSong sets the "song" edge to the Song entity.
func (psuo *ProjectSongUpdateOne) SetSong(s *Song) *ProjectSongUpdateOne {
	return psuo.SetSongID(s.ID)
}

// Mutation returns the ProjectSongMutation object of the builder.
func (psuo *ProjectSongUpdateOne) Mutation() *ProjectSongMutation {
	return psuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (psuo *ProjectSongUpdateOne) ClearProject() *ProjectSongUpdateOne {
	psuo.mutation.ClearProject()
	return psuo
}

// ClearSong clears the "song" edge to the Song entity.
func (psuo *ProjectSongUpdateOne) ClearSong() *ProjectSongUpdateOne {
	psuo.mutation.ClearSong()
	return psuo
}

// Where appends a list predicates to the ProjectSongUpdate builder.
func (psuo *ProjectSongUpdateOne) Where(ps ...predicate.ProjectSong) *ProjectSongUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *ProjectSongUpdateOne) Select(field string, fields ...string) *ProjectSongUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated ProjectSong entity.
func (psuo *ProjectSongUpdateOne) Save(ctx context.Context) (*ProjectSong, error) {
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *ProjectSongUpdateOne) SaveX(ctx context.Context) *ProjectSong {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *ProjectSongUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *ProjectSongUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psuo *ProjectSongUpdateOne) check() error {
	if v, ok := psuo.mutation.Priority(); ok {
		if err := projectsong.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "ProjectSong.priority": %w`, err)}
		}
	}
	if v, ok := psuo.mutation.Difficulty(); ok {
		if err := projectsong.DifficultyValidator(v); err != nil {
			return &ValidationError{Name: "difficulty", err: fmt.Errorf(`ent: validator failed for field "ProjectSong.difficulty": %w`, err)}
		}
	}
	if psuo.mutation.ProjectCleared() && len(psuo.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectSong.project"`)
	}
	if psuo.mutation.SongCleared() && len(psuo.mutation.SongIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectSong.song"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (psuo *ProjectSongUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProjectSongUpdateOne {
	psuo.modifiers = append(psuo.modifiers, modifiers...)
	return psuo
}

func (psuo *ProjectSongUpdateOne) sqlSave(ctx context.Context) (_node *ProjectSong, err error) {
	if err := psuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectsong.Table, projectsong.Columns, sqlgraph.NewFieldSpec(projectsong.FieldID, field.TypeInt))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProjectSong.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectsong.FieldID)
		for _, f := range fields {
			if !projectsong.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projectsong.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.Priority(); ok {
		_spec.SetField(projectsong.FieldPriority, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedPriority(); ok {
		_spec.AddField(projectsong.FieldPriority, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.Difficulty(); ok {
		_spec.SetField(projectsong.FieldDifficulty, field.TypeEnum, value)
	}
	if value, ok := psuo.mutation.Comment(); ok {
		_spec.SetField(projectsong.FieldComment, field.TypeString, value)
	}
	if psuo.mutation.CommentCleared() {
		_spec.ClearField(projectsong.FieldComment, field.TypeString)
	}
	if psuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectsong.ProjectTable,
			Columns: []string{projectsong.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectsong.ProjectTable,
			Columns: []string{projectsong.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.SongCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectsong.SongTable,
			Columns: []string{projectsong.SongColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(song.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.SongIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectsong.SongTable,
			Columns: []string{projectsong.SongColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(song.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(psuo.modifiers...)
	_node = &ProjectSong{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectsong.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
